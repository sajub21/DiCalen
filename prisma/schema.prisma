// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth
  accounts Account[]
  sessions Session[]

  // Calendar
  calendars Calendar[]
  events    Event[]

  // Subscription
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  plan                   Plan      @default(FREE)

  // Preferences
  timezone     String  @default("UTC")
  theme        Theme   @default(SYSTEM)
  notifications Boolean @default(true)

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Calendar {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3b82f6")
  isDefault   Boolean  @default(false)
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  events Event[]

  @@map("calendars")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  allDay      Boolean  @default(false)
  location    String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Recurrence
  isRecurring   Boolean           @default(false)
  recurrenceRule String?
  parentEventId String?
  parentEvent   Event?            @relation("EventRecurrence", fields: [parentEventId], references: [id])
  childEvents   Event[]           @relation("EventRecurrence")

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendarId String
  calendar   Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  // Attachments
  attachments EventAttachment[]

  // Notifications
  notifications EventNotification[]

  @@map("events")
}

model EventAttachment {
  id       String @id @default(cuid())
  filename String
  url      String
  size     Int
  mimeType String

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_attachments")
}

model EventNotification {
  id        String               @id @default(cuid())
  type      NotificationType
  timing    Int // minutes before event
  sent      Boolean              @default(false)
  sentAt    DateTime?
  createdAt DateTime             @default(now())

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_notifications")
}

enum Plan {
  FREE
  PRO
  PREMIUM
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum NotificationType {
  EMAIL
  PUSH
  SMS
}